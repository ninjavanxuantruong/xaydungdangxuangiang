<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <title><%= name %></title>
  <link rel="stylesheet" href="/public/style.css" />
  <!-- PDF.js từ CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js" defer></script>
</head>
<body>
  

  <main>
    <div class="controls">
      <button class="btn" id="prevBtn">⬅️ Trang trước</button>
      <button class="btn" id="nextBtn">➡️ Trang sau</button>
      <button class="btn primary" id="readBtn">🔊 Đọc trang</button>
      <button class="btn" id="stopBtn">⏸️ Tạm dừng</button>
      <span id="pageInfo" class="page-info"></span>
    </div>

    <canvas id="pdfCanvas"></canvas>
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const pdfUrl = "<%= link %>";
      const canvas = document.getElementById('pdfCanvas');
      const ctx = canvas.getContext('2d');
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      const readBtn = document.getElementById('readBtn');
      const stopBtn = document.getElementById('stopBtn');
      const pageInfo = document.getElementById('pageInfo');

      let pdfDoc = null;
      let currentPage = 1;
      let scale = 1.2;

      // ====== Voice setup ======
      let voices = [];
      let viVoice = null;
      function loadVoices() {
        voices = speechSynthesis.getVoices() || [];
        viVoice = voices.find(v => v.lang.toLowerCase() === 'vi-vn')
               || voices.find(v => v.lang.toLowerCase().startsWith('vi'))
               || null;
      }
      loadVoices();
      speechSynthesis.onvoiceschanged = loadVoices;

      // ====== Reading state ======
      let isReading = false;
      let isPaused = false;
      let currentUtterance = null;

      // ====== PDF load ======
      const loadingTask = pdfjsLib.getDocument({ url: pdfUrl });
      loadingTask.promise.then(doc => {
        pdfDoc = doc;
        renderPage(currentPage);
        updatePageInfo();
      }).catch(err => {
        console.error('PDF load error:', err);
        alert('Không thể tải PDF. Vui lòng kiểm tra link.');
      });

      function updatePageInfo() {
        if (!pdfDoc) return;
        pageInfo.textContent = `Trang ${currentPage} / ${pdfDoc.numPages}`;
      }

      async function renderPage(num) {
        const page = await pdfDoc.getPage(num);
        const viewport = page.getViewport({ scale });
        canvas.width = viewport.width;
        canvas.height = viewport.height;
        await page.render({ canvasContext: ctx, viewport }).promise;
        // Auto stop reading when changing page
        if (speechSynthesis.speaking) {
          speechSynthesis.cancel();
          isReading = false;
          isPaused = false;
          stopBtn.textContent = "⏸️ Tạm dừng";
        }
      }

      async function readCurrentPage() {
        if (!pdfDoc) return;

        // Nếu đang đọc thì bấm lại sẽ dừng hẳn
        if (isReading) {
          speechSynthesis.cancel();
          isReading = false;
          isPaused = false;
          stopBtn.textContent = "⏸️ Tạm dừng";
          return;
        }

        const page = await pdfDoc.getPage(currentPage);
        const textContent = await page.getTextContent();
        const text = textContent.items.map(item => item.str).join(' ');
        if (!text || text.trim().length === 0) {
          alert('Trang này không có văn bản (có thể là ảnh scan).');
          return;
        }

        if (speechSynthesis.speaking) {
          speechSynthesis.cancel();
        }

        currentUtterance = new SpeechSynthesisUtterance(text);
        currentUtterance.lang = 'vi-VN';
        if (viVoice) currentUtterance.voice = viVoice;
        currentUtterance.rate = 1;
        currentUtterance.pitch = 1;

        currentUtterance.onend = () => {
          isReading = false;
          isPaused = false;
          stopBtn.textContent = "⏸️ Tạm dừng";
        };
        currentUtterance.onerror = () => {
          isReading = false;
          isPaused = false;
          stopBtn.textContent = "⏸️ Tạm dừng";
        };

        isReading = true;
        isPaused = false;
        speechSynthesis.speak(currentUtterance);
      }

      // ====== Event listeners ======
      prevBtn.addEventListener('click', async () => {
        if (!pdfDoc || currentPage <= 1) return;
        currentPage--;
        await renderPage(currentPage);
        updatePageInfo();
      });

      nextBtn.addEventListener('click', async () => {
        if (!pdfDoc || currentPage >= pdfDoc.numPages) return;
        currentPage++;
        await renderPage(currentPage);
        updatePageInfo();
      });

      readBtn.addEventListener('click', readCurrentPage);

      // Nút Stop = Pause/Resume
      stopBtn.addEventListener('click', () => {
        if (!speechSynthesis.speaking && !isPaused) return;

        if (!isPaused) {
          // Đang đọc -> tạm dừng
          speechSynthesis.pause();
          isPaused = true;
          stopBtn.textContent = "▶️ Tiếp tục";
        } else {
          // Đang tạm dừng -> tiếp tục
          speechSynthesis.resume();
          isPaused = false;
          stopBtn.textContent = "⏸️ Tạm dừng";
        }
      });
    });
  </script>

</body>
</html>
