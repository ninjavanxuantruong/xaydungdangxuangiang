  <!DOCTYPE html>
  <html lang="vi">
  <head>
    <meta charset="UTF-8" />
    <title><%= name %></title>
    <link rel="stylesheet" href="/public/style.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js" defer></script>
  </head>
  <body>

    <div id="loadingAlert" class="alert">
      üìÑ Vui l√≤ng ch·ªù gi√¢y l√°t ƒë·ªÉ t·∫£i t√†i li·ªáu...
    </div>

    <main>
      <div class="controls">
        <button class="btn" id="prevBtn">‚¨ÖÔ∏è Trang tr∆∞·ªõc</button>
        <button class="btn" id="nextBtn">‚û°Ô∏è Trang sau</button>
        <button class="btn primary" id="readBtn">üîä ƒê·ªçc trang</button>
        <button class="btn" id="pauseBtn">‚è∏ D·ª´ng</button>
        <button class="btn" id="resumeBtn">‚ñ∂Ô∏è Ti·∫øp t·ª•c</button>
        <span id="pageInfo" class="page-info"></span>
      </div>

      <canvas id="pdfCanvas"></canvas>
    </main>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const loadingAlert = document.getElementById('loadingAlert');
        setTimeout(() => loadingAlert.style.display = 'none', 3000);

        const pdfUrl = "<%= link %>";
        const canvas = document.getElementById('pdfCanvas');
        const ctx = canvas.getContext('2d');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const readBtn = document.getElementById('readBtn');
        const pauseBtn = document.getElementById('pauseBtn');
        const resumeBtn = document.getElementById('resumeBtn');
        const pageInfo = document.getElementById('pageInfo');

        // √Çm thanh l·∫≠t trang
        const flipSound = new Audio("https://raw.githubusercontent.com/ninjavanxuantruong/xaydungdangxuangiang/main/flipcard-91468.mp3");
        flipSound.volume = 0.6;
        flipSound.load();

        // Unlock audio tr√™n mobile
        let audioCtx = null;
        function unlockAudio() {
          flipSound.play().then(() => {
            flipSound.pause();
            flipSound.currentTime = 0;
          }).catch(()=>{});
          if (!audioCtx) {
            audioCtx = new (window.AudioContext || window.webkitAudioContext)();
          }
          if (audioCtx.state === "suspended") {
            audioCtx.resume();
          }
          document.removeEventListener("touchstart", unlockAudio);
          document.removeEventListener("click", unlockAudio);
        }
        document.addEventListener("touchstart", unlockAudio, { once: true });
        document.addEventListener("click", unlockAudio, { once: true });

        // PDF.js config
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

        let pdfDoc = null;
        let currentPage = 1;

        const loadingTask = pdfjsLib.getDocument({ url: pdfUrl });
        loadingTask.promise.then(doc => {
          pdfDoc = doc;
          renderPage(currentPage);
          updatePageInfo();
        }).catch(err => {
          console.error('PDF load error:', err);
          alert('Kh√¥ng th·ªÉ t·∫£i PDF. Vui l√≤ng ki·ªÉm tra link.');
        });

        function updatePageInfo() {
          if (!pdfDoc) return;
          pageInfo.textContent = `Trang ${currentPage} / ${pdfDoc.numPages}`;
        }

        async function renderPage(num) {
          const page = await pdfDoc.getPage(num);
          const scale = 1.5;
          const viewport = page.getViewport({ scale });
          const outputScale = window.devicePixelRatio || 1;

          canvas.width = Math.floor(viewport.width * outputScale);
          canvas.height = Math.floor(viewport.height * outputScale);

          const transform = outputScale !== 1 ? [outputScale, 0, 0, outputScale, 0, 0] : null;
          const renderContext = { canvasContext: ctx, viewport, transform };
          await page.render(renderContext).promise;
        }

        // Stop audio khi sang trang m·ªõi
        function stopAudio() {
          if (audioCtx) {
            audioCtx.close();
            audioCtx = null;
          }
        }

        // ƒê·ªçc trang
        async function readCurrentPage() {
          if (!pdfDoc) return;
          stopAudio(); // d·ª´ng trang c≈©

          const page = await pdfDoc.getPage(currentPage);
          const textContent = await page.getTextContent();
          let text = textContent.items.map(item => item.str).join(' ');

          text = text.replace(/\s+/g, ' ').replace(/[\u200B-\u200D\uFEFF]/g, '').trim();
          if (!text) {
            alert('Trang n√†y kh√¥ng c√≥ vƒÉn b·∫£n (c√≥ th·ªÉ l√† ·∫£nh scan).');
            return;
          }

          function splitByWords(str, maxLen) {
            const words = str.split(' ');
            const parts = [];
            let current = '';
            for (const w of words) {
              if ((current + ' ' + w).trim().length > maxLen) {
                if (current) parts.push(current.trim());
                current = w;
              } else {
                current += (current ? ' ' : '') + w;
              }
            }
            if (current) parts.push(current.trim());
            return parts;
          }

          const chunks = splitByWords(text, 200);
          console.log("üîé T·ªïng s·ªë ƒëo·∫°n:", chunks.length);

          audioCtx = new (window.AudioContext || window.webkitAudioContext)();
          let currentTime = audioCtx.currentTime;

          async function fetchAudioBuffer(snippet) {
            const url = `/tts?q=${encodeURIComponent(snippet)}`;
            const resp = await fetch(url);
            const arrayBuffer = await resp.arrayBuffer();
            return await audioCtx.decodeAudioData(arrayBuffer);
          }

          for (let i = 0; i < chunks.length; i++) {
            const buffer = await fetchAudioBuffer(chunks[i]);
            const source = audioCtx.createBufferSource();
            source.buffer = buffer;
            source.connect(audioCtx.destination);
            source.start(currentTime);
            currentTime += buffer.duration;
            console.log(`‚ñ∂Ô∏è ƒê√£ x·∫øp ƒëo·∫°n ${i + 1}:`, chunks[i]);
          }
        }

        // N√∫t ƒëi·ªÅu khi·ªÉn
        prevBtn.addEventListener('click', async () => {
          if (!pdfDoc || currentPage <= 1) return;
          currentPage--;
          stopAudio();
          await renderPage(currentPage);
          updatePageInfo();
          flipSound.currentTime = 0; flipSound.play();
        });

        nextBtn.addEventListener('click', async () => {
          if (!pdfDoc || currentPage >= pdfDoc.numPages) return;
          currentPage++;
          stopAudio();
          await renderPage(currentPage);
          updatePageInfo();
          flipSound.currentTime = 0; flipSound.play();
        });

        readBtn.addEventListener('click', () => {
          unlockAudio();
          readCurrentPage();
        });

        pauseBtn.addEventListener('click', () => {
          if (audioCtx && audioCtx.state === "running") audioCtx.suspend();
        });
        resumeBtn.addEventListener('click', () => {
          if (audioCtx && audioCtx.state === "suspended") audioCtx.resume();
        });

        // Swipe (mobile)
        let touchStartX = 0;
        canvas.addEventListener('touchstart', (e) => {
          touchStartX = e.changedTouches[0].screenX;
        });
        canvas.addEventListener('touchend', async (e) => {
          const touchEndX = e.changedTouches[0].screenX;
          const deltaX = touchEndX - touchStartX;
          if (Math.abs(deltaX) < 50) return;
          if (deltaX < 0 && currentPage < pdfDoc.numPages) {
            currentPage++;
            stopAudio();
            await renderPage(currentPage);
            updatePageInfo();
            flipSound.currentTime = 0; flipSound.play();
          } else if (deltaX > 0 && currentPage > 1) {
            currentPage--;
            stopAudio();
            await renderPage(currentPage);
            updatePageInfo();
            flipSound.currentTime = 0; flipSound.play();
          }
        });

        // Mouse drag (desktop)
              // Mouse drag (desktop)
              let startX = 0;
              canvas.addEventListener('mousedown', (e) => {
                startX = e.clientX;
              });
              canvas.addEventListener('mouseup', async (e) => {
                const endX = e.clientX;
                const deltaX = endX - startX;
                if (Math.abs(deltaX) < 80) return; // ng∆∞·ª°ng k√©o
                if (deltaX < 0 && currentPage < pdfDoc.numPages) {
                  // k√©o sang tr√°i ‚Üí trang sau
                  currentPage++;
                  stopAudio();
                  await renderPage(currentPage);
                  updatePageInfo();
                  flipSound.currentTime = 0; 
                  flipSound.play();
                } else if (deltaX > 0 && currentPage > 1) {
                  // k√©o sang ph·∫£i ‚Üí trang tr∆∞·ªõc
                  currentPage--;
                  stopAudio();
                  await renderPage(currentPage);
                  updatePageInfo();
                  flipSound.currentTime = 0; 
                  flipSound.play();
                }
              });
              });
              </script>

              </body>
              </html>
